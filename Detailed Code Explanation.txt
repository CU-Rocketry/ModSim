This MATLAB code is a simple simulation of the motion of a 1-degree-of-freedom (1-DOF) object, a rocket, in a vertical direction. The code simulates the object's motion under the influence of gravitational force, 
thrust from a motor, and atmospheric drag. 

### Define Variables
- `Cd` is the drag coefficient, a dimensionless number representing the aerodynamic drag experienced by the object.
- `M` is the mass of the object in kilograms.
- `A` is the cross-sectional area of the object in square meters.
- `motor_thrust` is the thrust generated by a motor in Newtons.
- `motor_burn_time` is the duration of motor burn in seconds.
- `g` is the acceleration due to gravity in meters per second squared.
- `rho` is the air density in kilograms per cubic meter.

### Calculate Parameters/ Variable Setup
This section is left empty, but it's where you could calculate other parameters needed for the simulation.

### Set Simulation Parameters
- `dT` is the time step for the simulation in seconds. It defines the size of each time interval used in the simulation.
- `z`, `z_dot`, and `z_dot_dot` are variables that represent the vertical position, velocity, and acceleration of the object, respectively.

### Run the simulation
The main part of the code is a while loop that iterates until a certain criterion is met. Here's what happens within the loop:

1. `t` is the current time, calculated as the number of iterations (`iter`) times the time step `dT`.

2. Forces and acceleration are calculated:
   - `q` represents the dynamic pressure, which depends on the square of the object's velocity.
   - `Fd` is the drag force experienced by the object, calculated based on the dynamic pressure, cross-sectional area, and drag coefficient.
   - `T` represents the thrust. It is initially set to `motor_thrust` but becomes zero after the motor burn time.
   - `W` is the weight of the object, calculated as the product of its mass `M` and the acceleration due to gravity `g`.
   - `z_dot_dot` represents the vertical acceleration and is calculated using Newton's second law (F = ma) as (Thrust - Drag - Weight) / Mass.

3. Update the object's position and velocity for the next time step:
   - `z_dot` (vertical velocity) is updated by integrating the acceleration over the time step: `z_dot = z_dot + z_dot_dot * dT`.
   - `z` (vertical position) is updated similarly: `z = z + z_dot * dT`.

4. The code checks if the simulation should continue. It increases the iteration count `iter`, and if `iter` exceeds 1000, it sets `cont_critereon` to `false`, ending the simulation.

5. The while loop continues until `cont_critereon` is `false`.

### Save Data
Not implemented as yet. 
Should be stored in a .XLSX file for easy data manipulation.
